# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

#import("//build/compiled_action.gni")
import("//third_party/idl/tool_build.gni")

template("compile_event_macro") {
    action_foreach(target_name) {

      script = "//third_party/idl/zsLib-eventing/runEventCompiler.py"

      sources = invoker.sources

      #Not of interest. Added just because outputs is required by action
      outputs = [ 
        "$target_out_dir/{{source_name_part}}",
      ]

      args = [
        "{{source}}",
        "$current_cpu",
        "$host_cpu",
      ]

      deps = [ "//third_party/idl/zsLib-eventing:zslib-eventing-tool-compiler($tool_build_toolchain)" ]

    }
}

template("compile_single_event_macro") {
    action(target_name) {

      script = "//third_party/idl/zsLib-eventing/runEventCompiler.py"
      
      sources = invoker.sources
      
      #Not of interest. Added just because outputs is required by action
      outputs = [ 
        "$target_out_dir/{source_name_part}",
      ]

      args = [
        rebase_path(sources[0], root_build_dir),
        "$current_cpu",
        "$host_cpu",
      ]

      deps = [ "//third_party/idl/zsLib-eventing:zslib-eventing-tool-compiler($tool_build_toolchain)" ]

    }
}

template("compile_idl_macro") {
    action(target_name) {

      script = "//third_party/idl/zsLib-eventing/runIDLCompiler.py"
      
      sources = invoker.sources
      idlAlreadyCompletedFlag = invoker.idlAlreadyCompletedFlag

      if (defined(invoker.idlOutputPath)) {
        idlOutputPath = invoker.idlOutputPath
      } else {
        idlOutputPath = "."
      }

      if (defined(invoker.idlLanguages)) {
        idlLanguages = invoker.idlLanguages
      } else {
        idlLanguages = "c dotnet json cx json wrapper python cppwinrt msidl"
      }

      #Not of interest. Added just because outputs is required by action
      #outputs = [ 
      #  "$target_out_dir/{source_name_part}",
      #]

      outputs = invoker.outputs

      args = [
        rebase_path(sources[0], root_build_dir),
        idlAlreadyCompletedFlag,
        "$current_cpu",
        "$idlOutputPath",
        "$idlLanguages",
        "$host_cpu",
      ]

      deps = [ "//third_party/idl/zsLib-eventing:zslib-eventing-tool-compiler($tool_build_toolchain)" ]

    }
}

